{"version":3,"sources":["useStomp.js","useClientId.js","ListaTransmissores/ListaTransmissores.js","ListaDados/ListaDados.js","App.js","serviceWorker.js","index.js"],"names":["useStomp","props","_useState","useState","_useState2","Object","slicedToArray","state","setState","client_id","logger","request","useEffect","client","Client","configure","webSocketFactory","SockJS","onConnect","subscribe","concat","message","dados","JSON","parse","body","deactivate","publish","destination","stringify","activate","useClientId","clientId","setClientId","onNewIP","pc","window","RTCPeerConnection","mozRTCPeerConnection","webkitRTCPeerConnection","iceServers","noop","localIPs","ipRegex","iterateIP","ip","createDataChannel","createOffer","then","sdp","split","forEach","line","indexOf","match","setLocalDescription","catch","reason","onicecandidate","ice","candidate","getUserIP","replace","ListaTransmissores","listaDeTransmissores","react_default","a","createElement","className","sort","b","no","map","transmissor","key","data_hora","onClick","Date","toLocaleString","ListaDados","listaDeDados","cabecalho","registro","objectSpread","keys","length","campo","App","_useState3","undefined","_useState4","setTransmissor","ListaTransmissores_ListaTransmissores","ListaDados_ListaDados","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.466f32c1.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\nimport SockJS from 'sockjs-client'\nimport {Client} from '@stomp/stompjs'\n\nexport default function useStomp(props) {\n    const [state, setState] = useState([])\n    \n    const {client_id, logger, request} = props\n    \n    useEffect(() => {\n        const client = new Client({})\n\n        client.configure({\n            // brokerURL: 'ws://logbridge.herokuapp.com/socket',\n            // debug: (str) => {console.log(str)},\n            webSocketFactory: () => new SockJS('https://logbridge.herokuapp.com/sockjs'),\n            onConnect: () => {\n                client.subscribe(`/response/${client_id}`, (message) => {\n                    const dados = JSON.parse(message.body)\n                    setState(dados.message)\n                    client.deactivate()\n                })\n        \n                client.publish({ destination: `/app/request/${logger}`, body: JSON.stringify({client_id, request}) })\n            },\n        })\n\n        client.activate()\n\n    }, [client_id, logger, request])\n\n    return state;\n}","import {useState, useEffect} from 'react'\n\nexport default function useClientId(){\n    const [clientId, setClientId] = useState()\n\n    useEffect(() => {\n        getUserIP(ip => {\n            setClientId(ip.replace(/\\./g,'_'))\n        })\n    })\n\n    return clientId\n}\n\nfunction getUserIP(onNewIP) { //  onNewIp - your listener function for new IPs\n    //compatibility for firefox and chrome\n    var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n    var pc = new myPeerConnection({\n        iceServers: []\n    }),\n    noop = function() {},\n    localIPs = {},\n    ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g;\n    \n\n    function iterateIP(ip) {\n        if (!localIPs[ip]) onNewIP(ip);\n        localIPs[ip] = true;\n    }\n\n     //create a bogus data channel\n    pc.createDataChannel(\"\");\n\n    // create offer and set local description\n    pc.createOffer().then(function(sdp) {\n        sdp.sdp.split('\\n').forEach(function(line) {\n            if (line.indexOf('candidate') < 0) return;\n            line.match(ipRegex).forEach(iterateIP);\n        });\n        \n        pc.setLocalDescription(sdp, noop, noop);\n    }).catch(function(reason) {\n        // An error occurred, so handle the failure to connect\n    });\n\n    //listen for candidate events\n    pc.onicecandidate = function(ice) {\n        if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;\n        ice.candidate.candidate.match(ipRegex).forEach(iterateIP);\n    };\n}","import React from 'react'\n\nimport './ListaTransmissores.css'\nimport useStomp from '../useStomp'\nimport useClientId from '../useClientId'\n\nexport default function ListaTransmissores(props) {\n    \n    const {logger} = props\n    const client_id = useClientId()\n    const request = 'ultima_transmissao'\n\n    const listaDeTransmissores = useStomp({logger, client_id, request})\n\n    return(\n        <ul className=\"lista_transmissores\">\n            {\n                listaDeTransmissores.sort((a,b) => a.no > b.no).map(transmissor => (\n                    <li \n                        className=\"lista_transmissores\"\n                        key={transmissor.no + transmissor.data_hora}\n                        onClick={()=>props.onClick(transmissor)}\n                    >\n                        <div>{transmissor.no}</div>\n                        <div>{new Date(transmissor.data_hora).toLocaleString('pt-BR')}</div>\n                    </li>\n                ))\n            }\n        </ul>\n    )\n}","import React from 'react'\n\nimport useStomp from '../useStomp'\nimport useClientId from '../useClientId'\n\nimport './ListaDados.css'\n\nexport default function ListaDados(props) {\n    const {logger, transmissor} = props\n    const client_id = useClientId()\n    const request = `dados/${transmissor}`\n\n    const listaDeDados = useStomp({logger, client_id, request})\n\n    let cabecalho = {no : '', data_hora: ''}\n    listaDeDados.map(registro => cabecalho = {...cabecalho, ...registro})\n    cabecalho = Object.keys(cabecalho)\n\n    if(listaDeDados.length === 0) return `Carregando dados do transmissor ${transmissor}...`\n\n    return(\n        <table className=\"lista_dados\">\n\n            <thead>\n                <tr>\n                    {cabecalho.map(campo => <th key={campo}>{campo}</th> )}\n                </tr>\n            </thead>\n\n            <tbody>\n            {listaDeDados.map(registro => (\n                <tr className=\"lista_dados\" key={registro.no + registro.data_hora}>\n                    {cabecalho.map(campo => (\n                        <td key={campo}>{\n                            campo === 'data_hora' ?\n                                new Date(registro[campo]).toLocaleString('pt-BR')\n                            :\n                                registro[campo]}\n                        </td>\n                    ))}\n                </tr>\n            ))}\n            </tbody>\n        </table>\n    )\n}","import React, {useState} from 'react';\n\nimport {ListaTransmissores} from './ListaTransmissores/'\nimport {ListaDados} from './ListaDados'\n\nimport './App.css'\nimport useClientId from './useClientId';\n\nfunction App(){\n    const [logger] = useState('rflogger01')\n    const [transmissor, setTransmissor] = useState(undefined)\n    const clientId = useClientId()\n\n    if(clientId === undefined) return null\n\n    return (\n        <div className=\"App\">\n            <div className=\"sidebar\">\n                <ListaTransmissores logger={logger} onClick={(transmissor)=>setTransmissor(transmissor.no)}/>\n            </div>\n\n            <div className=\"main\">\n            { transmissor !== undefined && logger !== undefined ?\n                <ListaDados logger={logger} transmissor={transmissor}/>\n            :\n                null\n            }\n            </div>\n        </div>\n    )\n}\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}