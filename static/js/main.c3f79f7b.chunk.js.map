{"version":3,"sources":["useStomp.js","ListaTransmissores/ListaTransmissores.js","useClientId.js","ListaDados/ListaDados.js","App.js","serviceWorker.js","index.js"],"names":["useStomp","props","_useState","useState","Client","client","Object","_home_jabes_rflogger_clients_data_bridge_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","_useState3","min","max","timestamp","Date","toISOString","replace","Math","floor","random","toString","randomId","client_id","_useState5","_useState6","connected","setConnected","_useState7","undefined","_useState8","response","setResponse","logger","request","flag","useEffect","webSocketFactory","configure","SockJS","onConnect","subscribe","concat","message","dados","JSON","parse","body","activate","console","log","publish","destination","stringify","ListaTransmissores","_useState2","setFlag","listaDeTransmissores","global","setTimeout","clearTimeout","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","sort","b","no","map","transmissor","key","data_hora","onClick","dateTimeString","dateTimeStr","DD","substr","MM","AAAA","hh","mm","ss","formatDate","useClientId","slicedToArray","clientId","setClientId","onNewIP","pc","window","RTCPeerConnection","mozRTCPeerConnection","webkitRTCPeerConnection","iceServers","noop","localIPs","ipRegex","iterateIP","ip","createDataChannel","createOffer","then","sdp","split","forEach","line","indexOf","match","setLocalDescription","catch","reason","onicecandidate","ice","candidate","getUserIP","ListaDados","listaDeDados","length","cabecalho","registro","objectSpread","keys","react_default","campo","App","_useState4","setTransmissor","ListaDados_ListaDados","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3f79f7b.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\nimport SockJS from 'sockjs-client'\nimport {Client} from '@stomp/stompjs'\n\nfunction randomId() {\n    const geraRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1) ) + min;\n    const timestamp = new Date().toISOString().replace(/[^\\d]/g, '')\n\n    return( geraRandomInt(1000000, 9999999).toString() + timestamp )\n}\n\nexport default function useStomp(props) {\n    const [client] = useState(new Client({}))\n    const [client_id] = useState(randomId())\n    const [connected, setConnected] = useState(false)\n    const [response, setResponse] = useState(undefined)\n\n    const {logger, request, flag} = props\n\n    useEffect(() => {\n        if(client.webSocketFactory === undefined){\n            // console.log('configurando')\n            client.configure({\n                // debug: (msg) => console.log(msg),\n                webSocketFactory: () => new SockJS('https://logbridge.herokuapp.com/sockjs'),\n                onConnect: () => {\n                    setConnected(true)\n                    client.subscribe(`/response/${client_id}`, (message) => {\n                        const dados = JSON.parse(message.body)\n                        setResponse(dados.message)\n                    })\n                },\n            })\n\n            client.activate()\n        }\n\n    }, [client, client_id])\n\n    useEffect(() => {\n        if(connected){\n            console.log('enviando', request)\n            client.publish({ destination: `/app/request/${logger}`, body: JSON.stringify({client_id, request}) })\n        }\n\n    }, [client, client_id, logger, connected, request, flag])\n\n    return response;\n}","import React, {useState, useEffect} from 'react'\n\nimport './ListaTransmissores.css'\nimport useStomp from '../useStomp'\n\nexport default function ListaTransmissores(props) {\n    const [flag, setFlag] = useState(0)\n    const {logger} = props\n    const request = 'ultima_transmissao'\n    const listaDeTransmissores = useStomp({logger, request, flag})\n\n    useEffect(() => {\n        global.setTimeout(() => {\n            setFlag(flag+1)\n        }, 5000)\n\n        return () => {\n            global.clearTimeout()\n        }\n    })\n\n    if(listaDeTransmissores === undefined) return \"Carregando...\"\n\n    return(\n        <ul className=\"lista_transmissores\">\n            {\n                listaDeTransmissores.sort((a,b) => a.no > b.no).map(transmissor => (\n                    <li \n                        className=\"lista_transmissores\"\n                        key={transmissor.no + transmissor.data_hora}\n                        onClick={()=>props.onClick(transmissor)}\n                    >\n                        <div>{transmissor.no}</div>\n                        <div>{formatDate(transmissor.data_hora+'Z')}</div>\n                    </li>\n                ))\n            }\n        </ul>\n    )\n}\n\nfunction formatDate(dateTimeString){\n    const dateTime = new Date(dateTimeString)\n    const dateTimeStr = dateTime.toISOString();\n\n    const DD = dateTimeStr.substr(8, 2)\n    const MM = dateTimeStr.substr(5, 2)\n    const AAAA = dateTimeStr.substr(0, 4)\n\n    const hh = dateTimeStr.substr(11, 2)\n    const mm = dateTimeStr.substr(14, 2)\n    const ss = dateTimeStr.substr(17, 2)\n\n    return `${DD}/${MM}/${AAAA} ${hh}:${mm}:${ss}`\n}","import {useState, useEffect} from 'react'\n\nexport default function useClientId(){\n    const [clientId, setClientId] = useState()\n\n    useEffect(() => {\n        getUserIP(ip => {\n            setClientId(ip.replace(/\\./g,'_'))\n        })\n    })\n\n    return clientId\n}\n\nfunction getUserIP(onNewIP) { //  onNewIp - your listener function for new IPs\n    //compatibility for firefox and chrome\n    var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n    var pc = new myPeerConnection({\n        iceServers: []\n    }),\n    noop = function() {},\n    localIPs = {},\n    ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g;\n    \n\n    function iterateIP(ip) {\n        if (!localIPs[ip]) onNewIP(ip);\n        localIPs[ip] = true;\n    }\n\n     //create a bogus data channel\n    pc.createDataChannel(\"\");\n\n    // create offer and set local description\n    pc.createOffer().then(function(sdp) {\n        sdp.sdp.split('\\n').forEach(function(line) {\n            if (line.indexOf('candidate') < 0) return;\n            line.match(ipRegex).forEach(iterateIP);\n        });\n        \n        pc.setLocalDescription(sdp, noop, noop);\n    }).catch(function(reason) {\n        // An error occurred, so handle the failure to connect\n    });\n\n    //listen for candidate events\n    pc.onicecandidate = function(ice) {\n        if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;\n        ice.candidate.candidate.match(ipRegex).forEach(iterateIP);\n    };\n}","import React from 'react'\n\nimport useStomp from '../useStomp'\nimport useClientId from '../useClientId'\n\nimport './ListaDados.css'\n\nexport default function ListaDados(props) {\n    const {logger, transmissor} = props\n\n    const client_id = useClientId()\n    const request = `dados/${transmissor}`\n\n    const listaDeDados = useStomp({logger, client_id, request})\n\n    if(listaDeDados === undefined) return `Localizando dados do transmissor ${transmissor}...`\n    else if(listaDeDados.length === 0) return `Não há dados do transmissor ${transmissor} gravados no período pesquisado`\n\n    let cabecalho = {no : '', data_hora: ''}\n    listaDeDados.map(registro => cabecalho = {...cabecalho, ...registro})\n    cabecalho = Object.keys(cabecalho)\n\n    return(\n        <table className=\"lista_dados\">\n\n            <thead>\n                <tr>\n                    {cabecalho.map(campo => <th key={campo}>{campo}</th> )}\n                </tr>\n            </thead>\n            <tbody>\n            {listaDeDados.map(registro => (\n                <tr className=\"lista_dados\" key={registro.no + registro.data_hora}>\n                    {cabecalho.map(campo => (\n                        <td key={campo}>{\n                            campo === 'data_hora' ?\n                                formatDate(registro[campo]) //.toLocaleString('pt-BR')\n                            :\n                                registro[campo]}\n                        </td>\n                    ))}\n                </tr>\n            ))}\n            </tbody>\n        </table>\n    )\n}\n\n\nfunction formatDate(dateTimeString){\n    const dateTime = new Date(dateTimeString)\n    const dateTimeStr = dateTime.toISOString();\n\n    const DD = dateTimeStr.substr(8, 2)\n    const MM = dateTimeStr.substr(5, 2)\n    const AAAA = dateTimeStr.substr(0, 4)\n\n    const hh = dateTimeStr.substr(11, 2)\n    const mm = dateTimeStr.substr(14, 2)\n    const ss = dateTimeStr.substr(17, 2)\n\n    return `${DD}/${MM}/${AAAA} ${hh}:${mm}:${ss}`\n}","import React, {useState} from 'react';\n\nimport {ListaTransmissores} from './ListaTransmissores/'\nimport {ListaDados} from './ListaDados'\n\nimport './App.css'\nimport useClientId from './useClientId';\n\nfunction App(){\n    const [logger] = useState('rflogger01')\n    const [transmissor, setTransmissor] = useState(undefined)\n    const clientId = useClientId()\n\n    if(clientId === undefined) return null\n\n    return (\n        <div className=\"App\">\n            <div className=\"sidebar\">\n                <ListaTransmissores logger={logger} onClick={(transmissor)=>setTransmissor(transmissor.no)}/>\n            </div>\n\n            <div className=\"main\">\n            { transmissor !== undefined && logger !== undefined ?\n                <ListaDados logger={logger} transmissor={transmissor}/>\n            :\n                null\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}